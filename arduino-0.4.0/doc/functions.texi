@c ---------------------------------------------------
@node  General Functions
@section  General Functions
@cindex  General Functions
@c General Functions arduinosetup
@c -----------------------------------------
@subsection  arduinosetup
@cindex  arduinosetup
@deftypefn {} {@var{retval} =} arduinosetup ()
@deftypefnx {} {@var{retval} =} arduinosetup (@var{propertyname}, @var{propertyvalue})
Open the arduino config / programming tool to program the arduino hardware for usage with
the Octave arduino functions.

arduinosetup will create a temporary project  using the arduino IDE and allow
compiling and programming of the code to an arduino.

@subsubheading Inputs

@var{propertyname}, @var{propertyvalue} - A sequence of property name/value pairs can be given
to set defaults while programming.

Currently the following properties can be set:
@table @asis
@item libraries
The value should be the name of a library, or string array of libraries to program on the
arduino board.
@item arduinobinary
The value should be the name/path of the arduino IDE binary for programming. If not specified,
the function will attempt to find the binary itself.
@end table

@subsubheading Outputs
@var{retval} - return 1 if arduino IDE returned without an error

@seealso{arduino, __arduino_binary__}
@end deftypefn
@c General Functions isarduino
@c -----------------------------------------
@subsection  isarduino
@cindex  isarduino
@deftypefn {} {@var{retval} =} isarduino (@var{obj})
Check if input value is an arduino object

Function is essentially just a call of
@code {
retval = asis(obj, "arduino");
}

@subsubheading Inputs
@var{obj} - The object to check

@subsubheading Outputs
@var{retval} is true, if obj is an arduino object, false otherwise.

@seealso{arduino}
@end deftypefn
@c General Functions listArduinoLibraries
@c -----------------------------------------
@subsection  listArduinoLibraries
@cindex  listArduinoLibraries
@deftypefn {} {@var{retval} =} listArduinoLibraries ()
@deftypefnx {} {@var{retval} =} listArduinoLibraries (@var{libtypes})
Retrieve list of all known arduino library modules that are available.

@subsubheading Inputs
@var{libtypes} - optional specifier for type of libraries to list.

Options are:
@table @asis
@item all
List core and addons
@item core
List core only libraries
@item addons
List addons only
@end table
When no libtypes is specified, all libraries are shown.

@subsubheading Outputs
@var{retval} is an cell array of string library names that are
available for programming to the arduino.

@seealso{arduino, arduinosetup}
@end deftypefn
@c General Functions scanForArduinos
@c -----------------------------------------
@subsection  scanForArduinos
@cindex  scanForArduinos
@deftypefn {} {@var{retval} =} scanForArduinos (@var{maxCount})
@deftypefnx {} {@var{retval} =} scanForArduinos (@var{maxCount}, @var{type})
Scan system for programmed arduino boards.

scanForArduinos will scan the system for programmed arduino boards and return at
most @var{maxCount} of them as a cell array in @var{retval}.

@subsubheading Inputs
@var{maxCount} - max number of arduino boards to detect.
if @var{maxCount} is not specified, or is a less than 1, the function will return as many
arduino boards as it can detect.

@var{type} - optional board type to match. If specified, the board type must match for the arduino to be added to the
return list.

@subsubheading Outputs
@var{retval} structure cell array of matching detected arduino boards.

Each cell value of the cell array will contain a structure with values of:
@table @asis
@item port
the serial port the arduino is connected to
@item board
the board type of the arduino
@end table

@seealso{arduino}
@end deftypefn
@c ---------------------------------------------------
@node  Arduino Functions
@section  Arduino Functions
@cindex  Arduino Functions
@c Arduino Functions @arduino/arduino
@c -----------------------------------------
@subsection  @@arduino/arduino
@cindex  arduino
@deftypefn {} {@var{retval} =} arduino ()
@deftypefnx {} {@var{retval} =} arduino (@var{port})
@deftypefnx {} {@var{retval} =} arduino (@var{port}, @var{board})
@deftypefnx {} {@var{retval} =} arduino (@var{port}, @var{board}[, [@var{propname}, @var{propvalue}]*)
Create a arduino object with a connection to an arduino board.

@subsubheading Inputs
@var{port} - full path of serial port to connect to. For Linux, usually /dev/ttySXXX, for windows COMXX.

@var{board} - name of board to connect (default is 'uno').

@var{propname}, @var{propvalue} - property name and value pair for additional properties
to pass to the creation of the arduino object.
Currently properties are ignored.

if the arduino function is called without parameters, it will scan for the first available
arduino it can find and connect to it.

@subsubheading Outputs
@var{retval} - a successfully connected arduino object.

@subsubheading Properties
The arduino object has the following public properties:
@table @asis
@item name
name assigned to the arduino object
@item debug
true / false flag for whether debug in turned on
@item port (read only)
the communications port the board is connected to.
@item board  (read only)
The name of the board type that the arduino connected to
@item libraries (read only)
The libraries currently programmed onto the board
@item availablepins
The pins available for use on the board
@end table
@seealso{scanForArduinos, arduinosetup}
@end deftypefn
@c Arduino Functions @arduino/checkI2CAddress
@c -----------------------------------------
@subsection  @@arduino/checkI2CAddress
@cindex  checkI2CAddress
@deftypefn {} {@var{retval} =} checkI2CAddress (@var{ar}, @var{address})
@deftypefnx {} {@var{retval} =} checkI2CAddress (@var{ar}, @var{address}, @var{bus})
Check that an address of given address responds on the I2C bus

@subsubheading Inputs
@var{ar} - arduino object connected to a arduino board.

@var{address} - I2C address number to check

@var{bus} - bus number to check for I2C device, when multiple buses are available.
If the bus is not specified, it will default to 0.

@subsubheading Outputs
@var{retval} - boolean value of true if address responds on the I2C bus

@subsubheading Example
@example
@code {
# create arduino connection.
ar = arduino();
# scan for devices on the I2C bus
checkI2CAddress (ar)
# output if a device using that address is attached
ans =
1
}
@end example

@seealso{arduino, scanI2Cbus}
@end deftypefn
@c Arduino Functions @arduino/configurePin
@c -----------------------------------------
@subsection  @@arduino/configurePin
@cindex  configurePin
@deftypefn {} {@var{currmode} =} configurePin (@var{ar}, @var{pin})
@deftypefnx {} {} configurePin (@var{ar}, @var{pin}, @var{mode})
Set/Get pin mode for a specified pin on arduino connection.

configurePin (@var{ar}, @var{pin}) will get the current mode of the specified pin.

configurePin (@var{ar}, @var{pin}, @var{mode}) will attempt set the pin to the specified
mode if the mode is unset.

@subsubheading Inputs
@var{ar} - the arduino object of the connection to an arduino board.

@var{pin} - string name of the pin to set/get the mode of.

@var{mode} - string mode to set the pin to.

@subsubheading Outputs
@var{mode} - string current mode of the pin.

Valid modes can be:
@itemize @bullet
@item AnalogInput
- Acquire analog signals from pin
@item DigitalInput
- Acquire digital signals from pin
@item DigitalOutput
- Generate digital signals from pin
@item I2C
- Specify a pin to use with I2C protocol
@item Pullup
- Specify pin to use a pullup switch
@item PWM
- Specify pin to use a pulse width modulator
@item Servo
- Specify pin to use a servo
@item SPI
- Specify a pin to use with SPI protocol
@item Unset
- Clears pin designation. The pin is no longer reserved and can be automatically
set at the next operation.
@end itemize

@seealso{arduino}

@end deftypefn
@c Arduino Functions @arduino/configurePinResource
@c -----------------------------------------
@subsection  @@arduino/configurePinResource
@cindex  configurePinResource
@deftypefn {} {@var{currmode} =} configurePinResource (@var{ar}, @var{pin})
@deftypefnx {} {} configurePinResource (@var{ar}, @var{pin}, @var{owner}, @var{mode})
@deftypefnx {} {} configurePinResource (@var{ar}, @var{pin}, @var{owner}, @var{mode}, @var{force})
Set/Get pin mode for a specified pin on arduino connection.

configurePinResource (@var{ar}, @var{pin}) will get the current mode of the specified pin.

configurePinResource (@var{ar}, @var{pin}, @var{owner}, @var{mode}) will attempt set the pin to the specified
mode and owner.

If the pin is already owned by another owner, the configure will fail unless the force option is used.
If the mode is already set, configure will fail unless force is used.

@subsubheading Inputs
@var{ar} - the arduino object of the connection to an arduino board.

@var{pin} - string name of the pin to set/get the mode of.

@var{mode} - string mode to set the pin to.

@var{owner} - string name to use as the pin owner.

@var{force} - boolean to force mode change. If not set, it will be false.

@subsubheading Outputs
@var{currmode} - current string mode of the pin.

Valid modes can be:
@itemize @bullet
@item AnalogInput
- Acquire analog signals from pin
@item DigitalInput
- Acquire digital signals from pin
@item DigitalOutput
- Generate digital signals from pin
@item I2C
- Specify a pin to use with I2C protocol
@item Pullup
- Specify pin to use a pullup switch
@item PWM
- Specify pin to use a pulse width modulator
@item Servo
- Specify pin to use a servo
@item SPI
- Specify a pin to use with SPI protocol
@item Reserved
- Pin marked reserved, but not for of any particular mode
@item Unset
- Clears pin designation. The pin is no longer reserved and can be automatically
set at the next operation.
@end itemize

@seealso{arduino, configurePin}
@end deftypefn
@c Arduino Functions @arduino/decrementResourceCount
@c -----------------------------------------
@subsection  @@arduino/decrementResourceCount
@cindex  decrementResourceCount
@deftypefn {} {@var{count} =} decrementResourceCount (@var{ar}, @var{resource})
Decrement the count of a named resource by 1 and return the
new count.

@subsubheading Inputs
@var{ar} - connected arduino object

@var{resource} - name of resource to decrement count.

@subsubheading Outputs
@var{count} = count of uses registered to resource.

@seealso{getResourceCount. incrementResourceCount}
@end deftypefn
@c Arduino Functions @arduino/display
@c -----------------------------------------
@subsection  @@arduino/display
@cindex  display
@deftypefn {} {} display (@var{ar})
Display the arduino object in a verbose way, showing the board and available pins.

@subsubheading Inputs
@var{ar} - the arduino object.

If the arduino object has debug mode set, additional information will be displayed.

@seealso{arduino}
@end deftypefn
@c Arduino Functions @arduino/getI2CTerminals
@c -----------------------------------------
@subsection  @@arduino/getI2CTerminals
@cindex  getI2CTerminals
@deftypefn {} {@var{pinlist} =} getI2CTerminals (@var{ar})
Get a cell list of pin Ids available are used for I2C mode.

@subsubheading Inputs
@var{ar} - the arduino object.

@subsubheading Outputs
@var{pinlist} - cell list of pin numbers available for I2C use.

@seealso{arduino}
@end deftypefn
@c Arduino Functions @arduino/getLEDTerminals
@c -----------------------------------------
@subsection  @@arduino/getLEDTerminals
@cindex  getLEDTerminals
@deftypefn {} {@var{pinlist} =} getLEDTerminals (@var{ar})
Get a cell list of pin Ids available are connected natively to LEDs.

@subsubheading Inputs
@var{ar} - the arduino object.

@subsubheading Outputs
@var{pinlist} - cell list of pin numbers available for LED use.

@seealso{arduino}
@end deftypefn
@c Arduino Functions @arduino/getMCU
@c -----------------------------------------
@subsection  @@arduino/getMCU
@cindex  getMCU
@deftypefn {} {@var{mcu} =} getMCU (@var{ar})
Get the MCU used by the connected arduino.

@subsubheading Inputs
@var{ar} - arduino object connected to a arduino board.

@subsubheading Outputs
@var{mcu} - string representing the mcu used by the arduino board.

@seealso{arduino}
@end deftypefn
@c Arduino Functions @arduino/getPWMTerminals
@c -----------------------------------------
@subsection  @@arduino/getPWMTerminals
@cindex  getPWMTerminals
@deftypefn {} {@var{pinlist} =} getPWMTerminals (@var{ar})
Get a cell list of pin Ids available for PWM use.

@subsubheading Inputs
@var{ar} - the arduino object.

@subsubheading Outputs
@var{pinlist} - cell list of pin numbers available for PWM use.

@seealso{arduino}
@end deftypefn
@c Arduino Functions @arduino/getPinInfo
@c -----------------------------------------
@subsection  @@arduino/getPinInfo
@cindex  getPinInfo
@deftypefn {} {@var{pininfo} =} getPinInfo (@var{ar}, @var{pin})
@deftypefnx {} {@var{pininfoarray} =} getPinInfo (@var{ar}, @var{pinarray})
Get the pin information from the input pins values.

getPinInfo (@var{ar}, @var{pin}) will get information for a single pin.

getPinInfo (@var{ar}, @var{pinarray}) will get a cell array of pin information

@subsubheading Inputs
@var{ar} - the connected arduino object.

@var{pin} - a pin number or pin name.

@var{pinarray} - the array of pin numbers or names

The pininfo struct contains the following fields:
@table @asis
@item terminal
Terminal number of the pin
@item name
String name of the pin
@item owner
Current item owner of the pin
@item mode
Current configured mode for the pin
@end table

@subsubheading Outputs
@var{pininfo} - struct on pin information.

@var{pininfolist} - cell array of pin info

@seealso{arduino, configurePinResource, getResourceOwner}
@end deftypefn
@c Arduino Functions @arduino/getPinsFromTerminals
@c -----------------------------------------
@subsection  @@arduino/getPinsFromTerminals
@cindex  getPinsFromTerminals
@deftypefn {} {@var{pinnames} =} getPinsFromTerminals (@var{ar}, @var{terminals})
Get the pin names from the input terminal values.

@subsubheading Inputs
@var{ar} - the connected arduino object.

@var{terminals} - the numeric pin number, or array of pin numbers to get pin names.

@subsubheading Outputs
@var{pinnames} - the string names of each input pin. If terminals was a single value, the return
will be a single string, otherwise it will return a cell array of each pin name.

@seealso{arduino, getTerminalsFromPins}
@end deftypefn
@c Arduino Functions @arduino/getResourceCount
@c -----------------------------------------
@subsection  @@arduino/getResourceCount
@cindex  getResourceCount
@deftypefn {} {@var{count} =} getResourceCount (@var{ar}, @var{resource})
Get the count of uses of  a given resource.

@subsubheading Inputs
@var{ar} - connected arduino object

@var{resource} - name of resource to get count for.

@subsubheading Outputs
@var{count} = count of uses registered to resource.

@seealso{incrementResourceCount. decrementResourceCount}
@end deftypefn
@c Arduino Functions @arduino/getResourceOwner
@c -----------------------------------------
@subsection  @@arduino/getResourceOwner
@cindex  getResourceOwner
@deftypefn {} {@var{owner} =} getResourceOwner (@var{ar}, @var{terminal})
Get the owner of pin allocated previously by configurePinResource.

@subsubheading Inputs
@var{ar} - connected arduino object

@var{terminal} - terminal number to get owner of.

@subsubheading Outputs
@var{owner} = owner of the terminal pin, or "" if not owned.

@seealso{configurePinResource}
@end deftypefn
@c Arduino Functions @arduino/getSPITerminals
@c -----------------------------------------
@subsection  @@arduino/getSPITerminals
@cindex  getSPITerminals
@deftypefn {} {@var{pinlist} =} getSPITerminals (@var{ar})
Get a cell list of pin Ids available for SPI mode.

@subsubheading Inputs
@var{ar} - the arduino object.

@subsubheading Outputs
@var{pinlist} - cell list of pin numbers available for SPI use.

@seealso{arduino}
@end deftypefn
@c Arduino Functions @arduino/getServoTerminals
@c -----------------------------------------
@subsection  @@arduino/getServoTerminals
@cindex  getServoTerminals
@deftypefn {} {@var{pinlist} =} getServoTerminals (@var{ar})
Get a cell list of pin Ids available for servo use.

@subsubheading Inputs
@var{ar} - the arduino object.

@subsubheading Outputs
@var{pinlist} - cell list of pin numbers available for servo use.

@seealso{arduino, getPWMTerminals}
@end deftypefn
@c Arduino Functions @arduino/getSharedResourceProperty
@c -----------------------------------------
@subsection  @@arduino/getSharedResourceProperty
@cindex  getSharedResourceProperty
@deftypefn {} {@var{count} =} getSharedResourceProperty (@var{ar}, @var{resource}, @var{property})
Get the value of a property from a given resource.

@subsubheading Inputs
@var{ar} - connected arduino object

@var{resource} - name of resource to get property for.

@var{property} - name of property from the resource.

@subsubheading Outputs
@var{propvalue} - value of the property

@seealso{getResourceCount, setSharedResourceProperty}
@end deftypefn
@c Arduino Functions @arduino/getTerminalMode
@c -----------------------------------------
@subsection  @@arduino/getTerminalMode
@cindex  getTerminalMode
@deftypefn {} {@var{mode} =} getTerminalMode (@var{ar}, @var{terminal})
Get the mode of a pin allocated previously by configurePinResource.

@subsubheading Inputs
@var{ar} - connected arduino object

@var{terminal} - terminal number to get owner of.

@subsubheading Outputs
@var{mode} - mode of the terminal pin, or "not_set" if not owned.

@seealso{configurePinResource, getResourceOwner}
@end deftypefn
@c Arduino Functions @arduino/getTerminalsFromPins
@c -----------------------------------------
@subsection  @@arduino/getTerminalsFromPins
@cindex  getTerminalsFromPins
@deftypefn {} {@var{pinnums} =} getTerminalsFromPins (@var{ar}, @var{pins})
Get the terminal number for each pin.

@subsubheading Inputs
@var{ar} - connected arduino object

@var{pins} - single pin name or cell or vector array of pin names.

@subsubheading Outputs
@var{pinnums} - pin number of each named pin. If the input was a single string, returns a number.
if the input pins was a vector or cell array, return a cell array of pin numbers corresponding
to each input pin name.

@seealso{arduino, getPinsFromTerminals}
@end deftypefn
@c Arduino Functions @arduino/incrementResourceCount
@c -----------------------------------------
@subsection  @@arduino/incrementResourceCount
@cindex  incrementResourceCount
@deftypefn {} {@var{count} =} incrementResourceCount (@var{ar}, @var{resource})
Increment the count value of a named resource by 1 and return the
new count

@subsubheading Inputs
@var{ar} - connected arduino object

@var{resource} - name of resource to increment count.

@subsubheading Outputs
@var{count} = count of uses registered to resource.

@seealso{getResourceCount. decrementResourceCount}
@end deftypefn
@c Arduino Functions @arduino/isTerminalAnalog
@c -----------------------------------------
@subsection  @@arduino/isTerminalAnalog
@cindex  isTerminalAnalog
@deftypefn {} {@var{ret} = } isTerminalAnalog (@var{obj}, @var{terminal})
Return true if pin is capable of analog input

@subsubheading Inputs
@var{ar} - the connected arduino object

@var{terminal} is a terminal number to check

@subsubheading Outputs
@var{ret} return 1 if terminal is a analog pin, 0 otherwise

@end deftypefn
@c Arduino Functions @arduino/isTerminalDigital
@c -----------------------------------------
@subsection  @@arduino/isTerminalDigital
@cindex  isTerminalDigital
@deftypefn {} {@var{ret} = } isTerminalDigital(@var{obj}, @var{terminal})
Return true if pin is capable of digital functions

@subsubheading Inputs
@var{ar} - the connected arduino object

@var{terminal} is a terminal number to check

@subsubheading Outputs
@var{ret} return 1 if terminal is a digital pin, 0 otherwise
@end deftypefn
@c Arduino Functions @arduino/playTone
@c -----------------------------------------
@subsection  @@arduino/playTone
@cindex  playTone
@deftypefn {} {} playTone (@var{ar}, @var{pin}, @var{freq}, @var{duration})
Play a tone of a given frequency on a specified pin.

@subsubheading Inputs
@var{ar} - connected arduino object

@var{pin} - digital pin to play tone on

@var{freq} - frequency in  hertz to play between 0 and 32767Hz.

@var{duration} duration in seconds to play tone between 0 and 30 seconds

If duration is 0 or not specified, tone will continue to play until next tone is commanded.
If frequency is 0, tone will stop playing

@strong{NOTE:} use of playTone can interfere with PWM output.
@end deftypefn
@c Arduino Functions @arduino/readAnalogPin
@c -----------------------------------------
@subsection  @@arduino/readAnalogPin
@cindex  readAnalogPin
@deftypefn {} {@var{value} =} readAnalogPin (@var{ar}, @var{pin})
Read analog voltage of  @var{pin}.

@subsubheading Inputs
@var{ar} - connected arduino object.

@var{pin} - string name of the pin to read.

@subsubheading Outputs
@var{value} - analog value of the pin

@subsubheading Example
@example
@code{
ar = arduino ();
readAnalogPin(ar, "A4");
ans =
87
}
@end example
@seealso{arduino, readVoltage}
@end deftypefn
@c Arduino Functions @arduino/readDigitalPin
@c -----------------------------------------
@subsection  @@arduino/readDigitalPin
@cindex  readDigitalPin
@deftypefn {} {@var{value} =} readDigitalPin (@var{obj}, @var{pin})
Read digital value from a digital I/O pin.

@subsubheading Inputs
@var{ar} - connected arduino object.

@var{pin} - string name of the pin to read.

@subsubheading Outputs
@var{value} - the logical value (0, 1, true false) of the current pin state.

@subsubheading Example
@example
@code{
a = arduino ();
pinvalue = readDigitalPin (a, 'D5');
}
@end example

@seealso{arduino, writeDigitalPin}
@end deftypefn
@c Arduino Functions @arduino/readVoltage
@c -----------------------------------------
@subsection  @@arduino/readVoltage
@cindex  readVoltage
@deftypefn {} {@var{voltage} =} readVoltage (@var{ar}, @var{pin})
Read analog voltage of a pin.

@subsubheading Inputs
@var{ar} - connected arduino.

@var{pin} - pin name or number to query for voltage

@subsubheading Outputs
@var{voltage} - scaled pin value as a voltage

@subsubheading Example
@example
@code{
ar = arduino ();
readVoltage(ar, "A4");
ans =
1.401
}
@end example
@seealso{arduino, readAnalogPin}
@end deftypefn
@c Arduino Functions @arduino/reset
@c -----------------------------------------
@subsection  @@arduino/reset
@cindex  reset
@deftypefn {} {} reset (@var{ar})
Send reset command to arduino hardware to force a hardware reset.

@subsubheading Inputs
@var{ar} - connected arduino object.

@seealso{arduino}
@end deftypefn
@c Arduino Functions @arduino/sendCommand
@c -----------------------------------------
@subsection  @@arduino/sendCommand
@cindex  sendCommand
@deftypefn {} {@var{outdata, outsize} =} sendCommand (@var{ar}, @var{libname}, @var{commandid})
@deftypefnx {} {@var{outdata, outsize} =} sendCommand (@var{ar}, @var{libname}, @var{commandid}, @var{data})
@deftypefnx {} {@var{outdata, outsize} =} sendCommand (@var{ar}, @var{libname}, @var{commandid}, @var{data}, @var{timeout})
Send a command with option data to the connected arduino, waiting up to a specified number of seconds
for a response.

@subsubheading Inputs
@var{ar} - connected arduino object.

@var{libname} - library sending the command. The name should match a programmed
library of the arduino, or an error will be displayed.

@var{commandid} - integer value for the command being sent to the arduino.

@var{data} - optional data sent with the command.

@var{timeout} - optional timeout to wait for data

@subsubheading Outputs
@var{outdata} - data returned back from the arduino in response to command

@var{outsize} - size of data received

If the arduino fails to respond with a valid reply, sendCommand will error.

@seealso{arduino}
@end deftypefn
@c Arduino Functions @arduino/setSharedResourceProperty
@c -----------------------------------------
@subsection  @@arduino/setSharedResourceProperty
@cindex  setSharedResourceProperty
@deftypefn {} {} setSharedResourceProperty (@var{ar}, @var{resource}, @var{propname}, @var{propvalue})
@deftypefnx {} {} setSharedResourceProperty (@var{ar}, @var{resource}, @var{propname}, @var{propvalue}, ___)
Set property values for a given resource.

@subsubheading Inputs
@var{ar} - connected arduino object

@var{resource} - name of resource to get property for.

@var{propname} - name of property from the resource.

@var{propvalue} - value of property from the resource.

Multiple @var{propname}, @var{propvalue} pairs can be given.

@subsubheading Outputs
None

@subsubheading Example
@example
@code{
ar = arduino();
setSharedResourceProperty(ar, "myresource", "myproperty", [1 2 3])
}
@end example

@seealso{getSharedResourceProperty}
@end deftypefn
@c Arduino Functions @arduino/uptime
@c -----------------------------------------
@subsection  @@arduino/uptime
@cindex  uptime
@deftypefn {} {@var{sec} =} uptime (@var{ar})
Get the number of seconds the arduino board has been running concurrently.


@subsubheading Inputs
@var{ar} - the arduino object of the connection to an arduino board.

@subsubheading Outputs
@var{sec} - the number seconds the board has been running. Note that the count will wrap around after
approximately 50 days.

@seealso{arduino}

@end deftypefn
@c Arduino Functions @arduino/validatePin
@c -----------------------------------------
@subsection  @@arduino/validatePin
@cindex  validatePin
@deftypefn {} {} validatePin (@var{ar}, @var{pin}, @var{type})
Validate that the mode is allowed for specified pin

If the mode is not valid, and error will be thrown.

@subsubheading Inputs
@var{ar} - connected arduino object

@var{pin} -  name of pin to query mode validity of

@var{mode} - mode to query

Known modes are:
@itemize @bullet
@item 'I2C'
@item 'SPI'
@item 'PWM'
@item 'Servo'
@item 'analog'
@item 'digital'

@end itemize

@seealso{arduino, configurePin}
@end deftypefn
@c Arduino Functions @arduino/version
@c -----------------------------------------
@subsection  @@arduino/version
@cindex  version
@deftypefn {} {@var{ver} =} version (@var{ar})
Get version of library code installed on arduino board

@subsubheading Inputs
@var{ar} - the arduino object of the connection to an arduino board.

@subsubheading Outputs
@var{ver} - version string in format of X.Y.Z.

@seealso{arduino}

@end deftypefn
@c Arduino Functions @arduino/writeDigitalPin
@c -----------------------------------------
@subsection  @@arduino/writeDigitalPin
@cindex  writeDigitalPin
@deftypefn {} {} writeDigitalPin (@var{ar}, @var{pin}, @var{value})
Write digital value to a digital I/O pin.

@subsubheading Inputs
@var{ar} - connected arduino object.

@var{pin} - string name of the pin to write to.

@var{value} - the logical value (0, 1, true false) to write to the pin.

If pin was unconfigured before using, pin is set into digital mode.

@subsubheading Example
@example
@code{
a = arduino();
writeDigitalPin(a,'D5',1);
}
@end example

@seealso{arduino, readDigitalPin}

@end deftypefn
@c Arduino Functions @arduino/writePWMDutyCycle
@c -----------------------------------------
@subsection  @@arduino/writePWMDutyCycle
@cindex  writePWMDutyCycle
@deftypefn {} {} writePWMDutyCyle (@var{ar}, @var{pin}, @var{value})
Set pin to output a square wave with a specified duty cycle.

@subsubheading Inputs
@var{ar} - connected arduino object

@var{pin} - pin to write to.

@var{value} - duty cycle value where 0 = off, 0.5 = 50% on, 1 = always on.

@subsubheading Example
@example
@code{
a = arduino();
writePWMDutyCycle(a,'D5',0.5);
}
@end example

@seealso{arduino, writePWMVoltage}

@end deftypefn
@c Arduino Functions @arduino/writePWMVoltage
@c -----------------------------------------
@subsection  @@arduino/writePWMVoltage
@cindex  writePWMVoltage
@deftypefn {} {} writePWMVoltage (@var{ar}, @var{pin}, @var{voltage})
Emulate an approximate voltage out of a pin using PWM.

@subsubheading Inputs
@var{ar} - connected arduino object

@var{pin} - pin to write to.

@var{voltage} - voltage to emulate with PWM, between 0 - 5.0

@subsubheading Example
@example
@code{
a = arduino();
writePWMVoltage(a,'D5',1.0);
}
@end example

@seealso{arduino, writePWMDutyCycle}
@end deftypefn
@c ---------------------------------------------------
@node  Arduino I2C Functions
@section  Arduino I2C Functions
@cindex  Arduino I2C Functions
@c Arduino I2C Functions @i2cdev/display
@c -----------------------------------------
@subsection  @@i2cdev/display
@cindex  display
@deftypefn {} {} display (@var{dev})
Display i2cdev object.

@subsubheading Inputs
@var{dev} - i2cdev object

@seealso{i2cdev}
@end deftypefn
@c Arduino I2C Functions @i2cdev/i2cdev
@c -----------------------------------------
@subsection  @@i2cdev/i2cdev
@cindex  i2cdev
@deftypefn {} {@var{dev} =} i2cdev (@var{ar}, @var{address})
@deftypefnx {} {@var{dev} =} i2cdev (@var{ar}, @var{address}, @var{propname}, @var{propvalue})
Create an i2cdev object to communicate to the i2c port on a connected arduino.

@subsubheading Inputs
@var{ar} - connected arduino object

@var{address} - address to use for device on I2C bus.

@var{propname}, @var{propvalue} - property name/value pair for values to pass to devices.

Currently known properties:
@table @asis
@item bus
bus number (when arduino board supports multiple I2C buses)
with value of 0 or 1.
@end table

@subsubheading Outputs
@var{dev} - new created i2cdev object.

@subsubheading Properties
The i2cdev object has the following public properties:
@table @asis
@item parent
The parent (arduino) for this device
@item pins
pins used by this object
@item bus
bus used for created object
@item address
I2C address set for object
@end table

@seealso{arduino}
@end deftypefn
@c Arduino I2C Functions @i2cdev/read
@c -----------------------------------------
@subsection  @@i2cdev/read
@cindex  read
@deftypefn {} {@var{data} =} read (@var{dev}, @var{numbytes})
@deftypefnx {} {@var{data} =} read (@var{dev}, @var{numbytes}, @var{precision})
Read a specified number of bytes from a i2cdev object
using optional precision for bytesize.

@subsubheading Inputs
@var{dev} - connected i2c device opened using i2cdev

@var{numbytes} - number of bytes to read.

@var{precision} - Optional precision for the output data read data.
Currently known precision values are uint8 (default), int8, uint16, int16

@subsubheading Outputs
@var{data} - data read from i2cdevice

@seealso{arduino, i2cdev}
@end deftypefn
@c Arduino I2C Functions @i2cdev/readRegister
@c -----------------------------------------
@subsection  @@i2cdev/readRegister
@cindex  readRegister
@deftypefn {} {@var{data} =} readRegister (@var{dev}, @var{reg}, @var{numbytes})
@deftypefnx {} {@var{data} =} readRegister (@var{dev}, @var{reg}, @var{numbytes}, @var{precision})
Read a specified number of bytes from a register of an i2cdev object
using optional precision for bytesize.

@subsubheading Inputs
@var{dev} - connected i2c device opened using i2cdev

@var{reg} - registry value number

@var{numbytes} - number of bytes to read.

@var{precision} - Optional precision for the output data read data.
Currently known precision values are uint8 (default), int8, uint16, int16

@subsubheading Output
@var{data} - data read from device.

@seealso{arduino, i2cdev}
@end deftypefn
@c Arduino I2C Functions @i2cdev/subsref
@c -----------------------------------------
@subsection  @@i2cdev/subsref
@cindex  subsref
@deftypefn {} {@var{val} = } subsref (@var{dev}, @var{sub})
subref for i2cdev

@seealso{i2cdev}
@end deftypefn
@c Arduino I2C Functions @i2cdev/write
@c -----------------------------------------
@subsection  @@i2cdev/write
@cindex  write
@deftypefn {} {} write (@var{dev}, @var{datain})
@deftypefnx {} {} write (@var{dev}, @var{datain}, @var{precision})
Write data to a i2cdev object
using optional precision for the data byte used for the data.

@subsubheading Inputs
@var{dev} - connected i2c device opened using i2cdev

@var{datain} - data to write to device. Datasize should not exceed the constraints
of the data type specified for the precision.

@var{precision} - Optional precision for the input write data.
Currently known precision values are uint8 (default), int8, uint16, int16

@seealso{arduino, i2cdev, read}
@end deftypefn
@c Arduino I2C Functions @i2cdev/writeRegister
@c -----------------------------------------
@subsection  @@i2cdev/writeRegister
@cindex  writeRegister
@deftypefn {} {} writeRegister (@var{dev}, @var{reg}, @var{datain})
@deftypefnx {} {} writeRegister (@var{dev}, @var{dev}, @var{datain}, @var{precision})
Write data to i2cdev object at a given registry position
using optional precision for the data byte used for the data.

@subsubheading Inputs
@var{dev} - connected i2c device opened using i2cdev

@var{reg} - registry position to write to.

@var{datain} - data to write to device. Datasize should not exceed the constraints
of the data type specified for the precision.

@var{precision} - Optional precision for the input write data.
Currently known precision values are uint8 (default), int8, uint16, int16

@seealso{arduino, i2cdev, read}
@end deftypefn
@c Arduino I2C Functions scanI2Cbus
@c -----------------------------------------
@subsection  scanI2Cbus
@cindex  scanI2Cbus
@deftypefn {} {@var{retval} =} scanI2Cbus (@var{ar})
@deftypefnx {} {@var{retval} =} scanI2Cbus (@var{ar}, @var{bus})
Scan arduino for devices on the I2C bus.

@subsubheading Inputs
@var{ar} - arduino object connected to a arduino board.

@var{bus} - bus number to scan I2C devices, when multiple buses are available.
If the bus is not specified, it will default to 0.

@subsubheading Outputs
@var{retval} - cell array of addresses as strings in format of "0xXX".

@subsubheading Example
@example
@code {
# create arduino connection.
ar = arduino();
# scan for devices on the I2C bus
scanI2Cbus (ar)
# output is each detected i2c address as a string
ans =
@{
[1,1] = 0x50
@}
}
@end example

@seealso{arduino, i2cdev, checkI2CAddress}
@end deftypefn
@c ---------------------------------------------------
@node  Arduino Rotary Encoder Functions
@section  Arduino Rotary Encoder Functions
@cindex  Arduino Rotary Encoder Functions
@c Arduino Rotary Encoder Functions @rotaryEncoder/display
@c -----------------------------------------
@subsection  @@rotaryEncoder/display
@cindex  display
@deftypefn {} {@var{retval} =} display (@var{obj})
Display the rotary encoder object in a verbose way,

@subsubheading Inputs
@var{obj} - the arduino rotary encoder object created with rotaryEncoder

@seealso{rotaryEncoder}
@end deftypefn
@c Arduino Rotary Encoder Functions @rotaryEncoder/readCount
@c -----------------------------------------
@subsection  @@rotaryEncoder/readCount
@cindex  readCount
@deftypefn {} {[@var{count}, @var{time}] =} readCount (@var{obj})
@deftypefnx {} {[@var{count}, @var{time}] =} readCount (@var{obj}, @var{name}, @var{value})
read count value from the rotary encoder.

subsubheading Inputs
@var{obj} - rotary encoder object created with rotaryEncoder call.

@var{name}, @var{value} - optional name,value pairs

Valid option name pairs currently are:
@table @asis
@item reset
Reset the count after reading (if true)
@end table

@subsubheading Outputs
@var{count} - returned count read from the encoder.

@var{time} - seconds since arduino started

@seealso{rotaryEncoder, resetCount}
@end deftypefn
@c Arduino Rotary Encoder Functions @rotaryEncoder/readSpeed
@c -----------------------------------------
@subsection  @@rotaryEncoder/readSpeed
@cindex  readSpeed
@deftypefn {} {@var{speed} =} readSpeed (@var{obj})
read rotational speed from the rotary encoder.

@subsubheading Inputs
@var{obj} - rotary encoder object created with rotaryEncoder call.

@subsubheading Outputs
@var{speed} - returned speed in revolutions per minute read from the encoder.

@seealso{rotaryEncoder, resetCount}
@end deftypefn
@c Arduino Rotary Encoder Functions @rotaryEncoder/resetCount
@c -----------------------------------------
@subsection  @@rotaryEncoder/resetCount
@cindex  resetCount
@deftypefn {} reset (@var{obj})
@deftypefnx {} reset (@var{obj}, @var{cnt})
reset the rotary encoder count values

@subsubheading Inputs
@var{obj} - the rotaryEncoder object

@var{cnt} - optional count value to reset to

@seealso{rotaryEncoder, readCount}
@end deftypefn
@c Arduino Rotary Encoder Functions @rotaryEncoder/rotaryEncoder
@c -----------------------------------------
@subsection  @@rotaryEncoder/rotaryEncoder
@cindex  rotaryEncoder
@deftypefn {} {@var{obj} =} rotaryEncoder (@var{ar}, @var{chanApin}, @var{chanBpin})
@deftypefnx {} {@var{obj} =} rotaryEncoder (@var{ar}, @var{chanApin}, @var{chanBpin}, @var{ppr})
Create a rotaryEncoder object controlled by the input pins.

@subsubheading Inputs
@var{ar} - connected arduino object.

@var{chanApin} - pin used for channel A

@var{chanBpin} - pin used for channel B

@var{ppr} - count of encoder pulsed required for a full revolution of the encoder.

@subsubheading Outputs
@var{obj} - created rotary encoder object

@subsubheading Example
@example
a = arduino ();
enc = rotaryEncoder(a, "d2", "d3", 180);
@end example

@subsubheading Properties
The rotaryEncoder object has the following public properties:
@table @asis
@item parent
The parent (arduino) for this device
@item pins
pins used by this object
@item ppr
Number of pulses used per rotation
@end table

@seealso{arduino}
@end deftypefn
@c Arduino Rotary Encoder Functions @rotaryEncoder/subsref
@c -----------------------------------------
@subsection  @@rotaryEncoder/subsref
@cindex  subsref
@deftypefn {} {@var{val} = } subsref (@var{dev}, @var{sub})
subref for rotaryEncoder

@seealso{rotaryEncoder}
@end deftypefn
@c ---------------------------------------------------
@node  Arduino Servo Functions
@section  Arduino Servo Functions
@cindex  Arduino Servo Functions
@c Arduino Servo Functions @servo/display
@c -----------------------------------------
@subsection  @@servo/display
@cindex  display
@deftypefn {} {} display (@var{dev})
Display servo object.

@subsubheading Inputs
@var{dev} - device to display

@seealso{servo}
@end deftypefn
@c Arduino Servo Functions @servo/readPosition
@c -----------------------------------------
@subsection  @@servo/readPosition
@cindex  readPosition
@deftypefn {} {@var{position} = } readPosition (@var{servo})
Read the position of a servo

@subsubheading Inputs
@var{servo} - servo object created from arduino.servo.

@subsubheading Outputs
@var{position} - value between 0 .. 1 for the current servo position,
where 0 is the servo min position, 1 is the servo maximum position.

@seealso{servo, writePosition}
@end deftypefn
@c Arduino Servo Functions @servo/servo
@c -----------------------------------------
@subsection  @@servo/servo
@cindex  servo
@deftypefn {} {@var{obj} = } servo (@var{arduinoobj}, @var{pin})
@deftypefnx {} {@var{obj} = } servo (@var{arduinoobj}, @var{pin}, @var{propertyname}, @var{propertyvalue})
Create a servo object using a specified pin on a arduino board.

@subsubheading Inputs
@var{obj} - servo object

@var{arduinoobj} - connected arduino object

@var{propertyname},  @var{propertyvalue} - name value pairs for properties to pass
to the created servo object.

Current properties are:
@table @asis
@item minpulseduration
min PWM pulse value in seconds.
@item maxpulseduration
max PWM pulse value in seconds.
@end table

@subsubheading Outputs
@var{obj} - created servo object.

@subsubheading Example
@example
# create arduino connection
ar = arduino();
# create hobby servo (1 - 2 ms pulse range)
servo = servo(ar, "d9", "minpulseduration", 1.0e-3, "maxpulseduration", 2e-3);
# center the servo
writePosition(servo, 0.5);
@end example

@subsubheading Properties
The servo object has the following public properties:
@table @asis
@item parent
The parent (arduino) for this device
@item pins
pins used by this object
@item minpulseduration
minpusleduration set for object
@item maxpulseduration
maxpulseduration set for object
@end table

@seealso{arduino, readPosition, writePosition}
@end deftypefn
@c Arduino Servo Functions @servo/subsref
@c -----------------------------------------
@subsection  @@servo/subsref
@cindex  subsref
@deftypefn {} {@var{val} = } subsref (@var{dev}, @var{sub})
subref for servo

@seealso{servo}
@end deftypefn
@c Arduino Servo Functions @servo/writePosition
@c -----------------------------------------
@subsection  @@servo/writePosition
@cindex  writePosition
@deftypefn {} {} writePosition (@var{servo}, @var{position})
Write the position to a servo.

@subsubheading Inputs
@var{servo} - servo object created from arduino.servo.

@var{position} - value between 0 .. 1 for the current servo position,
where 0 is the servo min position, 1 is the servo maximum position.

@seealso{servo, readPosition}
@end deftypefn
@c ---------------------------------------------------
@node  Arduino Shiftregister Functions
@section  Arduino Shiftregister Functions
@cindex  Arduino Shiftregister Functions
@c Arduino Shiftregister Functions @shiftRegister/display
@c -----------------------------------------
@subsection  @@shiftRegister/display
@cindex  display
@deftypefn {} {@var{retval} =} display (@var{register})
Display the register object in a verbose way,

@subsubheading Inputs
@var{register} - the arduino register object created with shiftRegister.

@seealso{shiftRegister}
@end deftypefn
@c Arduino Shiftregister Functions @shiftRegister/read
@c -----------------------------------------
@subsection  @@shiftRegister/read
@cindex  read
@deftypefn {} {@var{retval} =} read (@var{register})
@deftypefnx {} {@var{retval} =} read (@var{register}, @var{precision})
read a value from the shift register.

@subsubheading Inputs
@var{register} - shift register created from shiftRegister call.

@var{precision} - optional precision of the data, where precision can be a
number in a multiple of 8 (ie: 8,16,32) or can be a named integer type:     8
of 'uint8', 'uint16', 'uint32'.  The default  precision is 8.

@subsubheading Outputs
@var{retval} - returned data read from the register.

@seealso{shiftRegister, write}
@end deftypefn
@c Arduino Shiftregister Functions @shiftRegister/reset
@c -----------------------------------------
@subsection  @@shiftRegister/reset
@cindex  reset
@deftypefn {} reset (@var{register})
clear the shift register value.

@subsubheading Inputs
@var{register} - shift register created from shiftRegister call.

@seealso{shiftRegister, read, write}
@end deftypefn
@c Arduino Shiftregister Functions @shiftRegister/shiftRegister
@c -----------------------------------------
@subsection  @@shiftRegister/shiftRegister
@cindex  shiftRegister
@deftypefn {} {@var{register} =} shiftRegister (@var{ar}, @var{shifttype}, @var{dataPin}, @var{clockPin} ...)
@deftypefnx {} {@var{register} =} shiftRegister (@var{ar},'74hc164', @var{dataPin}, @var{clockPin}, @var{resetPin})
@deftypefnx {} {@var{register} =} shiftRegister (@var{ar},'74hc165', @var{dataPin}, @var{clockPin}, @var{loadPin}, @var{clockEnablePin})
@deftypefnx {} {@var{register} =} shiftRegister(@var{ar},'74hc595', @var{dataPin}, @var{clockPin}, @var{latchPin} , @var{resetPin})
Create shift register of a given type, controlled by the input pins.

@subsubheading Inputs
Common function parameter definition:

@var{ar} - connected arduino object.

@var{shifttype} - string name of the shift register type.

@var{dataPin} - pin used for data in/out of the device.

@var{clockPin} - pin used for clocking data on the shiftRegister.


Other variables are dependent on the shift register type:
@table @asis
@item '74hc164'
Additional inputs:

@var{resetPin} - optional  pin for resetting the shift register.

@item '74hc165'
Additional inputs:

@var{loadPin} - load pin to the shift register.
@var{clockEnablePin} - clock enable pin.

@item '74hc595'
Additional inputs:

@var{latchPin} - latching data to the shift register.
@var{resetPin} - optional pin for resetting the shift register.

@end table

@subsubheading Outputs
@var{register} - register object

@subsubheading Properties
The shiftRegister object has the following public properties:
@table @asis
@item parent
The parent (arduino) for this device
@item pins
pins used by this object
@item model
model set for object
@end table

@seealso{arduino}
@end deftypefn
@c Arduino Shiftregister Functions @shiftRegister/subsref
@c -----------------------------------------
@subsection  @@shiftRegister/subsref
@cindex  subsref
@deftypefn {} {@var{val} = } subsref (@var{dev}, @var{sub})
subref for shiftRegister

@seealso{shiftRegister}
@end deftypefn
@c Arduino Shiftregister Functions @shiftRegister/write
@c -----------------------------------------
@subsection  @@shiftRegister/write
@cindex  write
@deftypefn {} write (@var{register}, @var{dataIn})
@deftypefnx {} write (@var{register}, @var{dataIn}, @var{precision})
Write a value to the shift register.

@subsubheading Inputs
@var{register} - shift register created from shiftRegister call.

@var{dataIn} - data to clock into the shiftRegister.

@var{precision} - optional precision of the data, where precision can be a
number in a multiple of 8 (ie: 8,16,32) or can be a named integer type
of 'uint8', 'uint16', 'uint32'.  The default  precision is 8.

@seealso{shiftRegister, read}
@end deftypefn
@c ---------------------------------------------------
@node  Arduino SPI Functions
@section  Arduino SPI Functions
@cindex  Arduino SPI Functions
@c Arduino SPI Functions @spidev/display
@c -----------------------------------------
@subsection  @@spidev/display
@cindex  display
@deftypefn {} {} display (@var{dev})
Display spidev object.

@subsubheading Inputs
@var{dev} - spidev object to display

@seealso{spidev}
@end deftypefn
@c Arduino SPI Functions @spidev/spidev
@c -----------------------------------------
@subsection  @@spidev/spidev
@cindex  spidev
@deftypefn {} {@var{dev} =} spidev (@var{ar}, @var{cspin})
@deftypefnx {} {@var{dev} =} spidev (@var{ar}, @var{cspin}, @var{propname}, @var{propvalue})
Create an spidev object to communicate to the SPI port on a connected arduino.

@subsubheading Inputs
@var{ar} - connected arduino object

@var{cspin} - chip select pin for attached spi device.

@var{propname}, @var{propvalue} - property name/value pair for values to pass to devices.

Currently known properties:
@table @asis
@item bitrate
bit rate speed in Mbs
@item bitorder
'msbfirst' or 'lsbfirst'
@item mode
SPI mode 0 - 3.
@end table

@subsubheading Outputs
@var{dev} - created spidev object

@subsubheading Properties
The spidev object has the following public properties:
@table @asis
@item parent
The parent (arduino) for this device
@item pins
pins used by this object
@item mode
mode used for created object
@item bitrate
Bitrate set for object
@item bitorder
Bitorder set for object
@item chipselectpin
Pin used for chipselect
@end table

@seealso{arduino, readWrite}
@end deftypefn
@c Arduino SPI Functions @spidev/subsref
@c -----------------------------------------
@subsection  @@spidev/subsref
@cindex  subsref
@deftypefn {} {@var{val} = } subsref (@var{dev}, @var{sub})
subref for spidev

@seealso{spidev}
@end deftypefn
@c Arduino SPI Functions @spidev/writeRead
@c -----------------------------------------
@subsection  @@spidev/writeRead
@cindex  writeRead
@deftypefn {} {@var{dataOut} =} readWrite (@var{spi}, @var{dataIn})
Write uint8 data to spi device and return
back clocked out response data of same size.

@subsubheading Inputs
@var{spi} - connected spi device on arduino

@var{dataIn} - uint8 sized data to send to spi device framed between SS frame.

@subsubheading Outputs
@var{dataOut} - uint8 data clocked out during send to dataIn.

@seealso{arduino, spidev}
@end deftypefn
@c ---------------------------------------------------
@node  Arduino Addons
@section  Arduino Addons
@cindex  Arduino Addons
@c Arduino Addons addon
@c -----------------------------------------
@subsection  addon
@cindex  addon
@deftypefn {} {@var{retval} =} addon (@var{ar}, @var{addonname})
@deftypefnx {} {@var{retval} =} addon (@var{ar}, @var{addonname}, varargs)
Create an addon object using the addon named class.

@subsubheading Inputs
@var{ar} - connected arduino object

@var{addonname} - the name of the addon to create. The addon name can be a user
addon or an inbuilt addon, however must appear in the listArduinoLibraries
output and have been programmed onto the arduino.

@var{varargs} - optional values that will be provided verbatim to the
the addon class constructor.

@subsubheading Outputs
@var{retval} - cell array of string library names.

@seealso{arduino, arduinosetup, listArduinoLibraries}
@end deftypefn
@c Arduino Addons arduinoioaddons.EEPRomAddon.EEPRom
@c -----------------------------------------
@subsection  arduinoioaddons.EEPRomAddon.EEPRom
@cindex  EEPRom
@deftypefn {} {} arduinoioaddons.EEPRomAddon.EEPRom
EEPROM addon for arduino

Allows read and write of uint8 data to the onboard arduino EEPROM.

@subsubheading Example
Assuming eeprom addon has been programmed into the Arduino:
@example
a = arduino ();
e = addon (a, "eepromaddon/eeprom");
write (e, 0, uint8("hello world"));
str = uint8( read(e, 0, 11) )
@end example

@seealso{addon}
@end deftypefn

@subsubheading Properties
@var{length} - Size of the EEPROM.

@subheading Methods
@deftypefn {} {@var{eeprom} =} EEPRom ()
Constructor to create eeprom device.
@subsubheading Outputs
@var{eeprom} - created EEPROM device.
@end deftypefn

@deftypefn {} {} erase ()
Erase all values in EEPROM (Effectively setting the 0xFF)
@end deftypefn

@deftypefn {} {} write (@var{address}, @var{uintdata})
Write data to EEPROM at the provided address.
@subsubheading Inputs
@var{address} - start address to write data to, should be a integer between 0 and the size of the EEPROM.

@var{uintdata} a value or array of uint8 data to write to EEPROM.
@end deftypefn

@deftypefn {} {@var{data} =} read (@var{address})
@deftypefnx {} {@var{data} =} read (@var{address}, @var{count})
Read data from starting address of EEPROM.
@subsubheading Inputs
@var{address} - start address to read data from, should be a integer between 0 and the size of the EEPROM.

@var{count} - Number of uint8 values to read from the EEPROM (default is 1)

@subsubheading Outputs
@var{data} a value or array of uint8 data read from the EEROM.
@end deftypefn
@c Arduino Addons arduinoioaddons.ExampleAddon.Echo
@c -----------------------------------------
@subsection  arduinoioaddons.ExampleAddon.Echo
@cindex  Echo
@deftypefn {} {} arduinoioaddons.ExampleAddon.Echo
Basic Example matlab/octave code to illustrate creating
a user addon.

@seealso{addon}
@end deftypefn

@subsubheading Properties
@var{Parent} - the parent arduino object.

@var{Pins} - the pins allocated the addon.

@subheading Methods
@deftypefn {} {@var{obj} =} Echo(arObj)
Constructor to create Echo addon
@subsubheading Inputs
@var{arObj} - the arduino parent object

@subsubheading Outputs
@var{obj} - created Echo object
@end deftypefn

@deftypefn {} {@var{response} = } shout(@var{text})
Send text to arduino and receive back the echoed reply

@subsubheading Inputs
@var{text} - text to send to arduino

@subsubheading Outputs
@var{response} - response from the arduino, which should be the same as
the input text.
@end deftypefn
@c Arduino Addons arduinoioaddons.ExampleLCD.LCD
@c -----------------------------------------
@subsection  arduinoioaddons.ExampleLCD.LCD
@cindex  LCD
@deftypefn {} {} arduinoioaddons.LCDAddon.LCD
Basic Example octave addon for LCD

Allows basic manipulation of an LCD as a illustration of using
the addon functionality.
@subsubheading Example
Assuming the arduino has been programmed with the lcd addon:
@example
a = arduino();
lcd = addon(a, "examplelcd/lcd", "d8", "d9", "d4", "d5", "d6", "d7")
clearLCD(lcd);
printLCD(lcd, "Hello");
# go to next line
gotoLCD(lcd, 0, 1);
printLCD(lcd, "World");
@end example
@seealso{addon}
@end deftypefn

@subsubheading Properties
@var{Pins} - the pins allocated the LCD display.

@subheading Methods
@deftypefn {} {@var{lcd} =} LCD(arObj, rs, enable, d0, d1, d2, d3)
Constructor to create LCD device
@subsubheading Inputs
@var{arObj} - the arduino parent object

@var{rs} - the pin to use for the rs line.

@var{enable} - the pin to use for the enable line.

@var{d0} - the pin to use for the d0 line.

@var{d1} - the pin to use for the d1 line.

@var{d2} - the pin to use for the d2 line.

@var{d3} - the pin to use for the d3 line.

@subsubheading Outputs
@var{lcd} - created LCD object
@end deftypefn

@deftypefn {} {} freeLCD()
Free the LCD

Should be called before discarding the LCD
@subsubheading Inputs
None.

@subsubheading Outputs
None.
@end deftypefn

@deftypefn {} {} clearLCD()
Clear the LCD display and set the cursor position to the home position.

@subsubheading Inputs
None.

@subsubheading Outputs
None.
@end deftypefn

@deftypefn {} {} printLCD(@var{text})
Display text on LCD starting at the current cursor position.

@subsubheading Inputs
@var{text} - text to display on LCD

@subsubheading Outputs
None.
@end deftypefn

@deftypefn {} {} gotoLCD(@var{col}, @var{row})
Set the cursor position to row, col

@subsubheading Inputs
@var{col} - 0 indexed LCD column to position to.

@var{row} - 0 indexed LCD row to position to.

@subsubheading Outputs
None.
@end deftypefn
@c Arduino Addons arduinoioaddons.RTCAddon.DS1307
@c -----------------------------------------
@subsection  arduinoioaddons.RTCAddon.DS1307
@cindex  DS1307
@deftypefn {} {} arduinoioaddons.RTCAddon.DS1307
DS1307 addon

@seealso{addon}
@end deftypefn

@subsubheading Properties
@var{Parent} - the parent arduino object.

@var{Pins} - the pins allocated the addon.

@subheading Methods
@deftypefn {} {@var{obj} =} DS1307(@var{arObj})
@deftypefnx {} {@var{obj} =} DS1307(@var{arObj}, @var{propertyname, propertyvalue} ....)
Constructor to create DS1307 addon
@subsubheading Inputs
@var{arObj} - the arduino parent object

@var{propertyname, propertyvalue} - optional property name, value pairs.
Current known properties are:
@table @asis
@item address
I2C address of the DS1307 (default 0x68)
@end table

@subsubheading Outputs
@var{obj} - created DS1307 object

@subsubheading Example
@example
@code {
a = arduino()
rtc = addon(a, "rtcaddon/ds1307")
}
@end example
@end deftypefn

@deftypefn {} {@var{date} =} clock(@var{dsObj})
@deftypefnx {} {} clock(@var{dsObj}, @var{date})
Get/set the DS1307 clock

@subsubheading Inputs
@var{dsObj} - the ds1307 object

@var{date} - a date vector in same format as datevec and clock

@subsubheading Outputs
@var{date} - a date vector in same format as datevec and clock

@subsubheading Example
@example
@code {
a = arduino()
rtc = addon(a, "rtcaddon/ds1307")
# get and display rtc time as a date string
datestr(rtc.clock)
}
@end example
@seealso{datevec}
@end deftypefn

@deftypefn {} {@var{ctrl} =} control(@var{dsObj})
@deftypefnx {} {} control(@var{dsObj}, @var{ctrl})
Get/set the DS1307 clock

@subsubheading Inputs
@var{dsObj} - the ds1307 object

@var{ctrl} - a structure containing the control bit fields.

@subsubheading Outputs
@var{ctrl} - a structure containing the control bit fields.

Control structure fields are:
Current properties are:
@table @asis
@item out
Out bit in the control register
@item sqwe
Square wave enable bit in control register
@item rs
The combined RS0, RS1 value
@end table

@end deftypefn

@deftypefn {} {@var{YN} =} isstarted(@var{dsObj})
Get whether the RTC clock is currently counting time

@subsubheading Inputs
@var{dsObj} - the ds1307 object

@subsubheading Outputs
@var{YN} - returns true if the RTC is counting

@seealso{start, stop}
@end deftypefn

@deftypefn {} {} start(@var{dsObj})
Start the RTC counting

@subsubheading Inputs
@var{dsObj} - the ds1307 object

@subsubheading Outputs
None

@seealso{datevec}
@end deftypefn

@deftypefn {} {} stop(@var{dsObj})
Stop the RTC counting

@subsubheading Inputs
@var{dsObj} - the ds1307 object

@subsubheading Outputs
None

@seealso{datevec}
@end deftypefn
@c Arduino Addons arduinoioaddons.adafruit.dcmotorv2
@c -----------------------------------------
@subsection  arduinoioaddons.adafruit.dcmotorv2
@cindex  dcmotorv2
@deftypefn {} {} arduinoioaddons.adafruit.dcmotorv2
DC Motor class for dc motor control on the adafruit motor shield

@seealso{arduinoioaddons.adafruit.motorshieldv2}
@end deftypefn

@subsubheading Properties
@var{Speed} - The speed value set for the motor

@var{Parent} - The parent shield for object (read only)

@var{MotorNumber} - The motor number (read only) values 1-4

@var{IsRunning} - boolean for if the motor is started (read only)

@subheading Methods
@deftypefn {} {@var{obj} =} dcmotorv2(@var{mObj}, @var{mnum})
@deftypefnx {} {@var{obj} =} dcmotorv2(@var{mObj}, @var{mnum}, @var{propertyname, propertyvalue} ....)
Constructor to create dcmotor object
@subsubheading Inputs
@var{mObj} - the motor shield object

@var{mnum} - The motor number (1 - 4)

@var{propertyname, propertyvalue} - Optional property name/value pairs to pass to motor object.

Current known properties are:
@table @asis
@item Speed
Initial speed (default 0). Should be a value between -1 and 1.
@end table

@subsubheading Outputs
@var{s} - a dcmotorv2 object

@subsubheading Example
@example
@code {
a = arduino()
ms = addon(a, "adafruit/motorshieldv2")
mtr = dcmotor(ms, 1)
}
@end example
@end deftypefn

@deftypefn {} {} start(@var{dcObj})
Start the motor moving in previously set speed/direction

@subsubheading Inputs
@var{dcObj} - the dcmotor object

@subsubheading Outputs
None

@seealso{adafruit.motorshieldv2}
@end deftypefn

@deftypefn {} {} stop(@var{dcObj})
Stop the motor moving

@subsubheading Inputs
@var{dcObj} - the dcmotor object

@subsubheading Outputs
None

@seealso{adafruit.motorshieldv2}
@end deftypefn
@c Arduino Addons arduinoioaddons.adafruit.motorshieldv2
@c -----------------------------------------
@subsection  arduinoioaddons.adafruit.motorshieldv2
@cindex  motorshieldv2
@deftypefn {} {} arduinoioaddons.adafruit.motorshieldv2
Adafruit motor shield addon

@seealso{addon}
@end deftypefn

@subsubheading Properties
@var{Parent} - the parent arduino object.

@var{Pins} - the pins allocated the addon.

@var{I2CAddress} - the i2c address used for accessing this shield.

@var{PWMFrequency} - the set PWM frequency for this shield.

@subheading Methods
@deftypefn {} {@var{obj} =} motorshieldv2(@var{arObj})
@deftypefnx {} {@var{obj} =} motorshieldv2(@var{arObj}, @var{propertyname, propertyvalue} ....)
Constructor to create motorshieldv2 addon object
@subsubheading Inputs
@var{arObj} - the arduino parent object

@var{propertyname, propertyvalue} - optional property name, value pairs.
Current known properties are:
@table @asis
@item address
I2C address of the motor shield  (default 0x60)
@item pwmfrequency
PWM Frequency to set on shield  (default 1600)
@end table

@subsubheading Outputs
@var{obj} - created  motorshieldv2 object

@subsubheading Example
@example
@code {
a = arduino()
mtr = addon(a, "adafruit/motorshieldv2")
}
@end example
@end deftypefn

@deftypefn {} {@var{s} =} servo(@var{mObj}, @var{mtrnum})
@deftypefnx {} {@var{s} =} servo(@var{mObj}, @var{mtrnum}, @var{propertyname}, @var{propertyvalue} ...)
Create a servo object

@subsubheading Inputs
@var{mObj} - the motor shield object

@var{mtrnum} - The servo motor number, where 1 is servo on pin "d10" and 2 is a servo on pin "d9"

@var{propertyname}, @var{propertyvalue} - Optional property name/value pairs to pass to servo object.

Properties are the same as the base servo object.

@subsubheading Outputs
@var{s} - a servo object

@subsubheading Example
@example
@code {
a = arduino()
ms = addon(a, "adafruit/motorshieldv2")
# get servo 1 (servo on pin D10)
s = ms.servo(1)
}
@end example

The function if the equivalent of calling the arduino.servo with the D9 or D10 pin has the input pin.

@seealso{servo}
@end deftypefn

@deftypefn {} {@var{s} =} stepper(@var{mObj}, @var{mtrnum}, @var{stepsperrev})
@deftypefnx {} {@var{s} =} stepper(@var{mObj}, @var{mtrnum}, @var{stepsperrev}, @var{propertyname}, @var{propertyvalue} ...)
Create a stepper motor object

@subsubheading Inputs
@var{mObj} - the motor shield object

@var{mtrnum} - The stepper motor number (1 or 2)

@var{stepsperrev} - Number of steps per revolution.

@var{propertyname}, @var{propertyvalue} - Optional property name/value pairs to pass to stepper object.

@subsubheading Outputs
@var{s} - a stepper object

@end deftypefn

@deftypefn {} {@var{s} =} dcmotor(@var{mObj}, @var{mtrnum})
@deftypefnx {} {@var{s} =} dcmotor(@var{mObj}, @var{mtrnum}, @var{propertyname}, @var{propertyvalue} ...)
Create a dcmotor motor object

@subsubheading Inputs
@var{mObj} - the motor shield object

@var{mtrnum} - The motor number (1 - 4)

@var{propertyname}, @var{propertyvalue} - Optional property name/value pairs to pass to motor object.

@subsubheading Outputs
@var{s} - a dcmotorv2 object

@end deftypefn
@c Arduino Addons arduinoioaddons.adafruit.stepper
@c -----------------------------------------
@subsection  arduinoioaddons.adafruit.stepper
@cindex  stepper
@deftypefn {} {} arduinoioaddons.adafruit.stepper
Stepper class for stepper control on the adafruit motor shield

@seealso{arduinoioaddons.adafruit.motorshieldv2}
@end deftypefn

@subsubheading Properties
@table @asis
@item @var{RPM}
The rpm value set for the stepper motor
@item StepType
the StepType for the stepper (string) which can be "single", "double", "interleave" or "microstep"
@item StepsPerRevolution
the StepsPerRevoluion for the stepper (read only)
@item MotorNumber
the motor number for the stepper (read only) value will be 1 or 2.
@item Parent
the parent shield of this stepper (read only)
@end table

@subheading Methods
@deftypefn {} {@var{obj} =} stepper(@var{mObj}, @var{mnum}, @var{stepsperrev})
@deftypefnx {} {@var{obj} =} stepper(@var{mObj}, @var{mnum}, @var{stepsperrev}, @var{propertyname, propertyvalue} ....)
Constructor to create dcmotor object
@subsubheading Inputs
@var{mObj} - the motor shield object

@var{mnum} - The motor number (1 or 2)

@var{stepsperrev} - Number of steps per revolution.

@var{propertyname, propertyvalue} - Optional property name/value pairs to pass to motor object.

Current known properties are:
@table @asis
@item RPM
the RPM for the stepper (revolutions per minute)
@item StepType
the StepType for the stepper (string) which can be "single", "double", "interleave" or "microstep"
@end table

@subsubheading Outputs
@var{s} - a stepper object

@subsubheading Example
@example
@code {
a = arduino()
ms = addon(a, "adafruit/motorshieldv2")
mtr = stepper(ms, 1, 200)
}
@end example
@end deftypefn

@deftypefn {} {} move(@var{sObj}, @var{steps})
Move the motor moving in the specified steps using the configured RPM.

@subsubheading Inputs
@var{sObj} - the stepper object

@subsubheading Outputs
None

@seealso{adafruit.motorshieldv2}
@end deftypefn

@deftypefn {} {} release(@var{sObj})
Release this motor

@subsubheading Inputs
@var{sObj} - the stepper object

@subsubheading Outputs
None

@seealso{adafruit.motorshieldv2}
@end deftypefn
@c ---------------------------------------------------
@node  Arduino Sensors
@section  Arduino Sensors
@cindex  Arduino Sensors
@c Arduino Sensors arduinosensor.DS1307
@c -----------------------------------------
@subsection  arduinosensor.DS1307
@cindex  DS1307
@deftypefn {} {} arduinosensor.DS1307
DS1307 realtime clock sensor
@end deftypefn

@subheading Methods
@deftypefn {} {@var{obj} =} DS1307(@var{arObj})
@deftypefnx {} {@var{obj} =} DS1307(@var{arObj}, @var{propertyname, propertyvalue} ....)
Constructor to create DS1307 sensor
@subsubheading Inputs
@var{arObj} - the arduino parent object

@var{propertyname, propertyvalue} - optional property name, value pairs.
Current known properties are:
Current properties are:
@table @asis
@item i2caddress
I2C address of the DS1307 (default 0x68)
@end table

@subsubheading Outputs
@var{obj} - created DS1307 object

@subsubheading Example
@example
@code {
a = arduino()
rtc = arduinosensor.DS1307(a)
}
@end example
@end deftypefn

@deftypefn {} {@var{date} =} clock(@var{dsObj})
@deftypefnx {} {} clock(@var{dsObj}, @var{date})
Get/set the DS1307 clock

@subsubheading Inputs
@var{dsObj} - the ds1307 object

@var{date} - a date vector in same format as datevec and clock

@subsubheading Outputs
@var{date} - a date vector in same format as datevec and clock

@subsubheading Example
@example
@code {
a = arduino()
rtc = arduinosensor.DS1307(a)
# get and display rtc time as a date string
datestr(rtc.clock)
}
@end example
@seealso{datevec}
@end deftypefn

@deftypefn {} {@var{ctrl} =} control(@var{dsObj})
@deftypefnx {} {} control(@var{dsObj}, @var{ctrl})
Get/set the DS1307 clock

@subsubheading Inputs
@var{dsObj} - the ds1307 object

@var{ctrl} - a structure containing the control bit fields.

@subsubheading Outputs
@var{ctrl} - a structure containing the control bit fields.

Control structure fields are:
Current properties are:
@table @asis
@item out
Out bit in the control register
@item sqwe
Square wave enble bit in control register
@item rs
The combined Rs0, RS1 value
@end table

@end deftypefn

@deftypefn {} {@var{YN} =} isstarted(@var{dsObj})
Get whether the RTC clock is currently counting time

@subsubheading Inputs
@var{dsObj} - the ds1307 object

@subsubheading Outputs
@var{YN} - returns true if the RTC is counting

@seealso{start, stop}
@end deftypefn

@deftypefn {} {} start(@var{dsObj})
Start the RTC counting

@subsubheading Inputs
@var{dsObj} - the ds1307 object

@subsubheading Outputs
None

@seealso{datevec}
@end deftypefn

@deftypefn {} {} stop(@var{dsObj})
Stop the RTC counting

@subsubheading Inputs
@var{dsObj} - the ds1307 object

@subsubheading Outputs
None

@seealso{datevec}
@end deftypefn
@c Arduino Sensors arduinosensor.GUVAS12SD
@c -----------------------------------------
@subsection  arduinosensor.GUVAS12SD
@cindex  GUVAS12SD
@deftypefn {} {} arduinosensor.GUVAS12SD
A thin wrapper for the GUVAS12SD analog UV-B sensor
@end deftypefn

@subheading Methods
@deftypefn {} {@var{obj} =} GUVAS12SD(@var{arObj}, @var{pin})
Constructor to create GUVAS12SD sensor
@subsubheading Inputs
@var{arObj} - the arduino parent object

@var{pin} - the analog pin that the sensor is connected to

@subsubheading Outputs
@var{obj} - created GUVAS12SD object

@subsubheading Example
@example
@code {
a = arduino()
# create sensor attached to pin a0.
sensor = arduinosensor.GUVAS12SD(a, "a0")
}
@end example
@end deftypefn

@deftypefn {} {@var{V} =} read(@var{dsObj})
Read the voltage of the sensor

@subsubheading Inputs
@var{dsObj} - the GUVAS12SD object

@subsubheading Outputs
@var{V} - read voltage - effectively equivalent to readAnalogPin(arObj, pin).

@subsubheading Example
@example
@code {
a = arduino()
s = arduinosensor.GUVAS12SD(a)
# voltage
volts = s.read
}
@end example
@seealso{arduinosensor.GUVAS12SD}
@end deftypefn

@deftypefn {} {@var{Idx} =} readIndex(@var{dsObj})
Read the UV index

@subsubheading Inputs
@var{dsObj} - the GUVAS12SD object

@subsubheading Outputs
@var{Idx} - the sensor reading as a UV index reading
@end deftypefn

@deftypefn {} {@var{uA} =} readuA(@var{dsObj})
Read the uA of the sensor

@subsubheading Inputs
@var{dsObj} - the GUVAS12SD object

@subsubheading Outputs
@var{uA} - the sensor reading as a uAmp value
@end deftypefn
@c Arduino Sensors arduinosensor.MPC3002
@c -----------------------------------------
@subsection  arduinosensor.MPC3002
@cindex  MPC3002
@deftypefn {} {} arduinosensor.MPC3002
MCP3002 ADC sensor
@end deftypefn

@subheading Methods
@deftypefn {} {@var{obj} =} MPC3002(@var{arObj}, @var{selectPin})
@deftypefnx {} {@var{obj} =} MPC3002(@var{arObj}, @var{selectPin}, @var{propertyname, propertyvalue} ....)
Constructor to create MPC3002 sensor
@subsubheading Inputs
@var{arObj} - the arduino parent object

@var{selectPin} - the SPI cs select pin

@var{propertyname, propertyvalue} - optional property name, value pairs.

Current properties are:
@table @asis
@item referenceVoltage
Reference voltage for scaling the ADC inputs (default 5.0)
@end table

@subsubheading Outputs
@var{obj} - created MCP3002 object

@subsubheading Example
@example
@code {
a = arduino()
sensor = arduinosensor.MPC3002(a, "d10")
}
@end example
@end deftypefn

@deftypefn {} {@var{voltage} =} readVoltage(@var{dsObj}, @var{chan})
Read the voltage from a channel

@subsubheading Inputs
@var{dsObj} - the MPC3002 object

@var{chan} - the channel to read (0 or 1)

@subsubheading Outputs
@var{voltage} - read voltage.

@subsubheading Example
@example
@code {
a = arduino()
s = arduinosensor.MPC3002(a, "d10")
volts = readVoltage(s, 0)
}
@end example
@seealso{arduinosensor.MPC3002}
@end deftypefn
@c Arduino Sensors arduinosensor.SI7021
@c -----------------------------------------
@subsection  arduinosensor.SI7021
@cindex  SI7021
@deftypefn {} {} arduinosensor.SI7021
SI7021 temperature and humidity sensor
@end deftypefn

@subheading Methods
@deftypefn {} {@var{obj} =} SI7021(@var{arObj})
@deftypefnx {} {@var{obj} =} SI7021(@var{arObj}, @var{propertyname, propertyvalue} ....)
Constructor to create SI7021 sensor
@subsubheading Inputs
@var{arObj} - the arduino parent object

@var{propertyname, propertyvalue} - optional property name, value pairs.
Current known properties are:
Current properties are:
@table @asis
@item i2caddress
I2C address of the SI7021 (default 0x40)
@end table

@subsubheading Outputs
@var{obj} - created SI7020 object

@subsubheading Example
@example
@code {
a = arduino()
sensor = arduinosensor.SI7021(a)
}
@end example
@end deftypefn

@deftypefn {} {@var{C} =} temperature(@var{dsObj})
Read the temperature

@subsubheading Inputs
@var{dsObj} - the si7021 object

@subsubheading Outputs
@var{C} - read temperature in deg C.

@subsubheading Example
@example
@code {
a = arduino()
s = arduinosensor.SI7021(a)
# get temp
temp = s.temperature
}
@end example
@seealso{arduinosensor.SI7021}
@end deftypefn

@deftypefn {} {@var{relH} =} humidity(@var{dsObj})
Read the relative humidity

@subsubheading Inputs
@var{dsObj} - the si7021 object

@subsubheading Outputs
@var{relH} - relative humidity as a percentage (0 - 100.0)
@end deftypefn

@deftypefn {} {@var{relH} =} info(@var{dsObj})
Read the sensor info

@subsubheading Inputs
@var{dsObj} - the si7021 object

@subsubheading Outputs
@var{inf} - structure containing the sensor information.

Structure fields are:
@table @asis
@item version
Chip firmware version
@item id
sensor id1,id2 value
@item type
String for detected chip type
@end table

@end deftypefn
@c ---------------------------------------------------
@node  Arduino I/O package
@section  Arduino I/O package
@cindex  Arduino I/O package
@c Arduino I/O package arduinoio.AddonBase
@c -----------------------------------------
@subsection  arduinoio.AddonBase
@cindex  AddonBase
@deftypefn {} {} arduinoio.AddonBase
Base class used for arduino library sensors

@seealso{arduinoio.LibraryBase}
@end deftypefn

@subheading Properties
Base properties are expected to be inherited and overwritten in inherited classes.
and are constant in order to query through the metaobject mechanism.

@var{Parent} - parent librarybase object

@subheading Methods
@deftypefn {} {@var{ab} =} AddonBase ()
Constructor of base class

@subsubheading Outputs
The return value @var{ab} is an object of the arduinio.AddonBase class.

@seealso{arduino, addon}
@end deftypefn

@deftypefn {} {} display ()
Display the addon in a verbose way.
@end deftypefn
@c Arduino I/O package arduinoio.FilePath
@c -----------------------------------------
@subsection  arduinoio.FilePath
@cindex  FilePath
@deftypefn {} {@var{retval} =} arduinoio.FilePath (@var{fullpathname})
Get the directory component of a pathname.

@subsubheading Inputs
@var{fullpathname} filepath to get directory component of.

@subsubheading Outputs
@var{retval} the directory part of the filename.
@end deftypefn
@c Arduino I/O package arduinoio.LibFiles
@c -----------------------------------------
@subsection  arduinoio.LibFiles
@cindex  LibFiles
@deftypefn {} {@var{filelist} =} arduinoio.LibFiles ()
Get the list of files used for the building arduino library
@subsubheading Outputs
@var{filelist} - string cell array of files for the arduino project
@end deftypefn
@c Arduino I/O package arduinoio.LibraryBase
@c -----------------------------------------
@subsection  arduinoio.LibraryBase
@cindex  LibraryBase
@deftypefn {} {} arduinoio.LibraryBase
Base class used for arduino library plugins

@seealso{arduino, listArduinoLibraries, addon}
@end deftypefn

@subheading Properties
Base properties are expected to be inherited and overwritten in inherited classes.
and are constant in order to query through the metaobject mechanism.

@var{LibraryName} - name of the addon library

@var{DependentLibraries} - array of dependent library names that must be included when
installing this plugin.

@var{CppHeaderFile} - name (if any) of header file that will be included into the arduino
project when adding this library.

@var{CppSourceFile} - name (if any) of source file that will be included into the arduino
project when adding this library.

@var{CppClassName} - name of the cpp class for the addon library.
project when adding this library.

@var{Pins} - pins allocated to the addon

@var{Parent} - parent arduino object.

@subheading Methods
@deftypefn {} {@var{lb} =} LibraryBase ()
Constructor of base class

The constructor is usually not called but called indirectly from the addon function.

@subsubheading Outputs
The return value @var{lb} is an object of the arduinio.LibraryBase class.

@seealso{arduino, listArduinoLibraries, addon}
@end deftypefn

@deftypefn {} {} display ()
Display the addon in a verbose way.
@end deftypefn
@c Arduino I/O package arduinoio.getBoardConfig
@c -----------------------------------------
@subsection  arduinoio.getBoardConfig
@cindex  getBoardConfig
@deftypefn {} {@var{retval} =} arduinoio.getBoardConfig (@var{boardname})
Return the configuration for a known arduino board type

Function is used to get the expected pin/board configuration for a named board type
which is used to verify and identify the functionality of the board.

@subsubheading Inputs
@var{boardname} - name of board to get configuration of ie: "uno"

@subsubheading Outputs
@var{retval} configuration struct.
@end deftypefn
@c ---------------------------------------------------
@node  Test Functions:
@section  Test Functions:
@cindex  Test Functions:
@c Test Functions: arduino_bistsetup
@c -----------------------------------------
@subsection  arduino_bistsetup
@cindex  arduino_bistsetup
@deftypefn {} {@var{retval} =} arduino_bistsetup ()
@deftypefnx {} {@var{retval} =} arduino_bistsetup (@var{propertyname}, @var{propertyvalue})
Install on an arduino the required core libraries to run the BIST tests

As part of the setup, the arduino IDE will be opened to allow programming
the arduino board.

@subsubheading Inputs

@var{propertyname}, @var{propertyvalue} - A sequence of property name/value pairs can be given
to set defaults while programming.

Currently the following properties can be set:
@table @asis
@item arduinobinary
The value should be the name/path of the arduino IDE binary for programming. If not specified,
the function will attempt to find the binary itself.
@item debug
Set the debug flag when checking the arduino
@end table

@subsubheading Outputs
@var{retval} - return 1 if everything installed ok

@seealso{arduino, arduinosetup}
@end deftypefn
